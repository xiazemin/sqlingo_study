// This file is generated by sqlingo (https://github.com/lqs/sqlingo)
// DO NOT EDIT.

package test_dsl

import (
	. "github.com/lqs/sqlingo"
)

type sqlingoRuntimeAndGeneratorVersionsShouldBeTheSame uint32

const _ = sqlingoRuntimeAndGeneratorVersionsShouldBeTheSame(SqlingoRuntimeVersion - 2)
const _ = sqlingoRuntimeAndGeneratorVersionsShouldBeTheSame(2 - SqlingoRuntimeVersion)

type table interface {
	Table
}

type numberField interface {
	NumberField
}

type stringField interface {
	StringField
}

type booleanField interface {
	BooleanField
}

type tPosts struct {
	table

	Id        fPostsId
	Content   fPostsContent
	FirstName fPostsFirstName
	LastName  fPostsLastName
	CreatedAt fPostsCreatedAt
	UpdatedAt fPostsUpdatedAt
}

type fPostsId struct{ numberField }
type fPostsContent struct{ stringField }
type fPostsFirstName struct{ stringField }
type fPostsLastName struct{ stringField }
type fPostsCreatedAt struct{ stringField }
type fPostsUpdatedAt struct{ stringField }

var oPosts = NewTable("posts")
var Posts = tPosts{
	table: oPosts,

	Id:        fPostsId{NewNumberField(oPosts, "id")},
	Content:   fPostsContent{NewStringField(oPosts, "content")},
	FirstName: fPostsFirstName{NewStringField(oPosts, "firstName")},
	LastName:  fPostsLastName{NewStringField(oPosts, "lastName")},
	CreatedAt: fPostsCreatedAt{NewStringField(oPosts, "createdAt")},
	UpdatedAt: fPostsUpdatedAt{NewStringField(oPosts, "updatedAt")},
}

func (t tPosts) GetFields() []Field {
	return []Field{t.Id, t.Content, t.FirstName, t.LastName, t.CreatedAt, t.UpdatedAt}
}

func (t tPosts) GetFieldByName(name string) Field {
	switch name {
	case "id":
		return t.Id
	case "content":
		return t.Content
	case "firstName":
		return t.FirstName
	case "lastName":
		return t.LastName
	case "createdAt":
		return t.CreatedAt
	case "updatedAt":
		return t.UpdatedAt
	default:
		return nil
	}
}

func (t tPosts) GetFieldsSQL() string {
	return "`id`, `content`, `firstName`, `lastName`, `createdAt`, `updatedAt`"
}

func (t tPosts) GetFullFieldsSQL() string {
	return "`posts`.`id`, `posts`.`content`, `posts`.`firstName`, `posts`.`lastName`, `posts`.`createdAt`, `posts`.`updatedAt`"
}

type PostsModel struct {
	Id        int32
	Content   *string
	FirstName *string
	LastName  *string
	CreatedAt string
	UpdatedAt string
}

func (m PostsModel) GetTable() Table {
	return Posts
}

func (m PostsModel) GetValues() []interface{} {
	return []interface{}{m.Id, m.Content, m.FirstName, m.LastName, m.CreatedAt, m.UpdatedAt}
}

type tProjects struct {
	table

	Id             fProjectsId
	Status         fProjectsStatus
	Username       fProjectsUsername
	HashedPassword fProjectsHashedPassword
	CreatedAt      fProjectsCreatedAt
	UpdatedAt      fProjectsUpdatedAt
}

type fProjectsId struct{ numberField }
type fProjectsStatus struct{ numberField }
type fProjectsUsername struct{ stringField }
type fProjectsHashedPassword struct{ stringField }
type fProjectsCreatedAt struct{ stringField }
type fProjectsUpdatedAt struct{ stringField }

var oProjects = NewTable("projects")
var Projects = tProjects{
	table: oProjects,

	Id:             fProjectsId{NewNumberField(oProjects, "id")},
	Status:         fProjectsStatus{NewNumberField(oProjects, "status")},
	Username:       fProjectsUsername{NewStringField(oProjects, "username")},
	HashedPassword: fProjectsHashedPassword{NewStringField(oProjects, "hashedPassword")},
	CreatedAt:      fProjectsCreatedAt{NewStringField(oProjects, "createdAt")},
	UpdatedAt:      fProjectsUpdatedAt{NewStringField(oProjects, "updatedAt")},
}

func (t tProjects) GetFields() []Field {
	return []Field{t.Id, t.Status, t.Username, t.HashedPassword, t.CreatedAt, t.UpdatedAt}
}

func (t tProjects) GetFieldByName(name string) Field {
	switch name {
	case "id":
		return t.Id
	case "status":
		return t.Status
	case "username":
		return t.Username
	case "hashedPassword":
		return t.HashedPassword
	case "createdAt":
		return t.CreatedAt
	case "updatedAt":
		return t.UpdatedAt
	default:
		return nil
	}
}

func (t tProjects) GetFieldsSQL() string {
	return "`id`, `status`, `username`, `hashedPassword`, `createdAt`, `updatedAt`"
}

func (t tProjects) GetFullFieldsSQL() string {
	return "`projects`.`id`, `projects`.`status`, `projects`.`username`, `projects`.`hashedPassword`, `projects`.`createdAt`, `projects`.`updatedAt`"
}

type ProjectsModel struct {
	Id             int32
	Status         *int32
	Username       string
	HashedPassword *string
	CreatedAt      string
	UpdatedAt      string
}

func (m ProjectsModel) GetTable() Table {
	return Projects
}

func (m ProjectsModel) GetValues() []interface{} {
	return []interface{}{m.Id, m.Status, m.Username, m.HashedPassword, m.CreatedAt, m.UpdatedAt}
}

type tUser struct {
	table

	Id        fUserId
	FirstName fUserFirstName
	LastName  fUserLastName
	CreatedAt fUserCreatedAt
	UpdatedAt fUserUpdatedAt
}

type fUserId struct{ numberField }
type fUserFirstName struct{ stringField }
type fUserLastName struct{ stringField }
type fUserCreatedAt struct{ stringField }
type fUserUpdatedAt struct{ stringField }

var oUser = NewTable("User")
var User = tUser{
	table: oUser,

	Id:        fUserId{NewNumberField(oUser, "id")},
	FirstName: fUserFirstName{NewStringField(oUser, "firstName")},
	LastName:  fUserLastName{NewStringField(oUser, "lastName")},
	CreatedAt: fUserCreatedAt{NewStringField(oUser, "createdAt")},
	UpdatedAt: fUserUpdatedAt{NewStringField(oUser, "updatedAt")},
}

func (t tUser) GetFields() []Field {
	return []Field{t.Id, t.FirstName, t.LastName, t.CreatedAt, t.UpdatedAt}
}

func (t tUser) GetFieldByName(name string) Field {
	switch name {
	case "id":
		return t.Id
	case "firstName":
		return t.FirstName
	case "lastName":
		return t.LastName
	case "createdAt":
		return t.CreatedAt
	case "updatedAt":
		return t.UpdatedAt
	default:
		return nil
	}
}

func (t tUser) GetFieldsSQL() string {
	return "`id`, `firstName`, `lastName`, `createdAt`, `updatedAt`"
}

func (t tUser) GetFullFieldsSQL() string {
	return "`User`.`id`, `User`.`firstName`, `User`.`lastName`, `User`.`createdAt`, `User`.`updatedAt`"
}

type UserModel struct {
	Id        int32
	FirstName string
	LastName  *string
	CreatedAt string
	UpdatedAt string
}

func (m UserModel) GetTable() Table {
	return User
}

func (m UserModel) GetValues() []interface{} {
	return []interface{}{m.Id, m.FirstName, m.LastName, m.CreatedAt, m.UpdatedAt}
}

type tUserMoneys struct {
	table

	Id            fUserMoneysId
	Name          fUserMoneysName
	FavoriteColor fUserMoneysFavoriteColor
	Age           fUserMoneysAge
	Cash          fUserMoneysCash
	FirstName     fUserMoneysFirstName
	LastName      fUserMoneysLastName
	CreatedAt     fUserMoneysCreatedAt
	UpdatedAt     fUserMoneysUpdatedAt
}

type fUserMoneysId struct{ numberField }
type fUserMoneysName struct{ stringField }
type fUserMoneysFavoriteColor struct{ stringField }
type fUserMoneysAge struct{ numberField }
type fUserMoneysCash struct{ numberField }
type fUserMoneysFirstName struct{ stringField }
type fUserMoneysLastName struct{ stringField }
type fUserMoneysCreatedAt struct{ stringField }
type fUserMoneysUpdatedAt struct{ stringField }

var oUserMoneys = NewTable("user_moneys")
var UserMoneys = tUserMoneys{
	table: oUserMoneys,

	Id:            fUserMoneysId{NewNumberField(oUserMoneys, "id")},
	Name:          fUserMoneysName{NewStringField(oUserMoneys, "name")},
	FavoriteColor: fUserMoneysFavoriteColor{NewStringField(oUserMoneys, "favoriteColor")},
	Age:           fUserMoneysAge{NewNumberField(oUserMoneys, "age")},
	Cash:          fUserMoneysCash{NewNumberField(oUserMoneys, "cash")},
	FirstName:     fUserMoneysFirstName{NewStringField(oUserMoneys, "firstName")},
	LastName:      fUserMoneysLastName{NewStringField(oUserMoneys, "lastName")},
	CreatedAt:     fUserMoneysCreatedAt{NewStringField(oUserMoneys, "createdAt")},
	UpdatedAt:     fUserMoneysUpdatedAt{NewStringField(oUserMoneys, "updatedAt")},
}

func (t tUserMoneys) GetFields() []Field {
	return []Field{t.Id, t.Name, t.FavoriteColor, t.Age, t.Cash, t.FirstName, t.LastName, t.CreatedAt, t.UpdatedAt}
}

func (t tUserMoneys) GetFieldByName(name string) Field {
	switch name {
	case "id":
		return t.Id
	case "name":
		return t.Name
	case "favoriteColor":
		return t.FavoriteColor
	case "age":
		return t.Age
	case "cash":
		return t.Cash
	case "firstName":
		return t.FirstName
	case "lastName":
		return t.LastName
	case "createdAt":
		return t.CreatedAt
	case "updatedAt":
		return t.UpdatedAt
	default:
		return nil
	}
}

func (t tUserMoneys) GetFieldsSQL() string {
	return "`id`, `name`, `favoriteColor`, `age`, `cash`, `firstName`, `lastName`, `createdAt`, `updatedAt`"
}

func (t tUserMoneys) GetFullFieldsSQL() string {
	return "`user_moneys`.`id`, `user_moneys`.`name`, `user_moneys`.`favoriteColor`, `user_moneys`.`age`, `user_moneys`.`cash`, `user_moneys`.`firstName`, `user_moneys`.`lastName`, `user_moneys`.`createdAt`, `user_moneys`.`updatedAt`"
}

type UserMoneysModel struct {
	Id            int32
	Name          *string
	FavoriteColor *string
	Age           *int32
	Cash          *int32
	FirstName     string
	LastName      *string
	CreatedAt     string
	UpdatedAt     string
}

func (m UserMoneysModel) GetTable() Table {
	return UserMoneys
}

func (m UserMoneysModel) GetValues() []interface{} {
	return []interface{}{m.Id, m.Name, m.FavoriteColor, m.Age, m.Cash, m.FirstName, m.LastName, m.CreatedAt, m.UpdatedAt}
}

type tUserSetters struct {
	table

	Id        fUserSettersId
	FirstName fUserSettersFirstName
	LastName  fUserSettersLastName
	CreatedAt fUserSettersCreatedAt
	UpdatedAt fUserSettersUpdatedAt
}

type fUserSettersId struct{ numberField }
type fUserSettersFirstName struct{ stringField }
type fUserSettersLastName struct{ stringField }
type fUserSettersCreatedAt struct{ stringField }
type fUserSettersUpdatedAt struct{ stringField }

var oUserSetters = NewTable("user_setters")
var UserSetters = tUserSetters{
	table: oUserSetters,

	Id:        fUserSettersId{NewNumberField(oUserSetters, "id")},
	FirstName: fUserSettersFirstName{NewStringField(oUserSetters, "firstName")},
	LastName:  fUserSettersLastName{NewStringField(oUserSetters, "lastName")},
	CreatedAt: fUserSettersCreatedAt{NewStringField(oUserSetters, "createdAt")},
	UpdatedAt: fUserSettersUpdatedAt{NewStringField(oUserSetters, "updatedAt")},
}

func (t tUserSetters) GetFields() []Field {
	return []Field{t.Id, t.FirstName, t.LastName, t.CreatedAt, t.UpdatedAt}
}

func (t tUserSetters) GetFieldByName(name string) Field {
	switch name {
	case "id":
		return t.Id
	case "firstName":
		return t.FirstName
	case "lastName":
		return t.LastName
	case "createdAt":
		return t.CreatedAt
	case "updatedAt":
		return t.UpdatedAt
	default:
		return nil
	}
}

func (t tUserSetters) GetFieldsSQL() string {
	return "`id`, `firstName`, `lastName`, `createdAt`, `updatedAt`"
}

func (t tUserSetters) GetFullFieldsSQL() string {
	return "`user_setters`.`id`, `user_setters`.`firstName`, `user_setters`.`lastName`, `user_setters`.`createdAt`, `user_setters`.`updatedAt`"
}

type UserSettersModel struct {
	Id        int32
	FirstName *string
	LastName  *string
	CreatedAt string
	UpdatedAt string
}

func (m UserSettersModel) GetTable() Table {
	return UserSetters
}

func (m UserSettersModel) GetValues() []interface{} {
	return []interface{}{m.Id, m.FirstName, m.LastName, m.CreatedAt, m.UpdatedAt}
}

type tUserValidators struct {
	table

	Id             fUserValidatorsId
	Username       fUserValidatorsUsername
	HashedPassword fUserValidatorsHashedPassword
	CreatedAt      fUserValidatorsCreatedAt
	UpdatedAt      fUserValidatorsUpdatedAt
}

type fUserValidatorsId struct{ numberField }
type fUserValidatorsUsername struct{ stringField }
type fUserValidatorsHashedPassword struct{ stringField }
type fUserValidatorsCreatedAt struct{ stringField }
type fUserValidatorsUpdatedAt struct{ stringField }

var oUserValidators = NewTable("user_validators")
var UserValidators = tUserValidators{
	table: oUserValidators,

	Id:             fUserValidatorsId{NewNumberField(oUserValidators, "id")},
	Username:       fUserValidatorsUsername{NewStringField(oUserValidators, "username")},
	HashedPassword: fUserValidatorsHashedPassword{NewStringField(oUserValidators, "hashedPassword")},
	CreatedAt:      fUserValidatorsCreatedAt{NewStringField(oUserValidators, "createdAt")},
	UpdatedAt:      fUserValidatorsUpdatedAt{NewStringField(oUserValidators, "updatedAt")},
}

func (t tUserValidators) GetFields() []Field {
	return []Field{t.Id, t.Username, t.HashedPassword, t.CreatedAt, t.UpdatedAt}
}

func (t tUserValidators) GetFieldByName(name string) Field {
	switch name {
	case "id":
		return t.Id
	case "username":
		return t.Username
	case "hashedPassword":
		return t.HashedPassword
	case "createdAt":
		return t.CreatedAt
	case "updatedAt":
		return t.UpdatedAt
	default:
		return nil
	}
}

func (t tUserValidators) GetFieldsSQL() string {
	return "`id`, `username`, `hashedPassword`, `createdAt`, `updatedAt`"
}

func (t tUserValidators) GetFullFieldsSQL() string {
	return "`user_validators`.`id`, `user_validators`.`username`, `user_validators`.`hashedPassword`, `user_validators`.`createdAt`, `user_validators`.`updatedAt`"
}

type UserValidatorsModel struct {
	Id             int32
	Username       string
	HashedPassword *string
	CreatedAt      string
	UpdatedAt      string
}

func (m UserValidatorsModel) GetTable() Table {
	return UserValidators
}

func (m UserValidatorsModel) GetValues() []interface{} {
	return []interface{}{m.Id, m.Username, m.HashedPassword, m.CreatedAt, m.UpdatedAt}
}

func GetTable(name string) Table {
	switch name {
	case "posts":
		return Posts
	case "projects":
		return Projects
	case "User":
		return User
	case "user_moneys":
		return UserMoneys
	case "user_setters":
		return UserSetters
	case "user_validators":
		return UserValidators
	default:
		return nil
	}
}
